{"remainingRequest":"C:\\Users\\Owner\\source\\repos\\TaskTracker-Vuejs\\TaskTracker-Vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Owner\\source\\repos\\TaskTracker-Vuejs\\TaskTracker-Vuejs\\src\\views\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Owner\\source\\repos\\TaskTracker-Vuejs\\TaskTracker-Vuejs\\src\\views\\Home.vue","mtime":1616440094971},{"path":"C:\\Users\\Owner\\source\\repos\\TaskTracker-Vuejs\\TaskTracker-Vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Owner\\source\\repos\\TaskTracker-Vuejs\\TaskTracker-Vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Owner\\source\\repos\\TaskTracker-Vuejs\\TaskTracker-Vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Tasks from '../components/Tasks'\nimport AddTask from '../components/AddTask'\n\nexport default {\n    name: 'Home',\n    props: { \n        showAddTask: Boolean, // Props passed from routerview. Identifying if new task is to be shown.\n    },\n    components: {\n        Tasks,\n        AddTask,\n    },\n    data() {\n        return {\n            tasks: []\n        }\n    },\n    methods: {\n        async addTask(task) {\n            const res = await fetch('api/tasks', {\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: JSON.stringify(task)\n            })\n\n            const data = await res.json()\n\n            this.tasks = [...this.tasks, data]\n        },\n        async deleteTask(id) {\n            if (confirm('Are you sure?')) {\n                const res = await fetch(`api/tasks/${id}`, {\n                    method: 'DELETE'\n                })\n\n                res.status === 200 ? (this.tasks = this.tasks.filter((task) => task.id !== id)) : alert('Error deleting task!')\n            }\n        },\n        async toggleReminder(id) {\n            const taskToToggle = await this.fetchTask(id)\n            const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n            const res = await fetch(`api/tasks/${id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: JSON.stringify(updTask)\n            })\n\n            const data = await res.json()\n\n            this.tasks = this.tasks.map((task) =>\n                task.id === id ? { ...task, reminder: data.reminder } : task\n            )\n        },\n        async fetchTasks() {\n            const res = await fetch('api/tasks')\n            const data = await res.json()\n            return data\n        },\n        async fetchTask(id) {\n            const res = await fetch(`api/tasks/${id}`)\n            const data = await res.json()\n            return data\n        }\n    },\n    async created() {\n        this.tasks = await this.fetchTasks()\n    }\n};\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div>\r\n        <div v-show=\"showAddTask\">\r\n            <AddTask @add-task=\"addTask\" />\r\n        </div>\r\n        <Tasks @toggle-reminder=\"toggleReminder\" @delete-task=\"deleteTask\" :tasks=\"tasks\" />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Tasks from '../components/Tasks'\r\n    import AddTask from '../components/AddTask'\r\n\r\n    export default {\r\n        name: 'Home',\r\n        props: { \r\n            showAddTask: Boolean, // Props passed from routerview. Identifying if new task is to be shown.\r\n        },\r\n        components: {\r\n            Tasks,\r\n            AddTask,\r\n        },\r\n        data() {\r\n            return {\r\n                tasks: []\r\n            }\r\n        },\r\n        methods: {\r\n            async addTask(task) {\r\n                const res = await fetch('api/tasks', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(task)\r\n                })\r\n\r\n                const data = await res.json()\r\n\r\n                this.tasks = [...this.tasks, data]\r\n            },\r\n            async deleteTask(id) {\r\n                if (confirm('Are you sure?')) {\r\n                    const res = await fetch(`api/tasks/${id}`, {\r\n                        method: 'DELETE'\r\n                    })\r\n\r\n                    res.status === 200 ? (this.tasks = this.tasks.filter((task) => task.id !== id)) : alert('Error deleting task!')\r\n                }\r\n            },\r\n            async toggleReminder(id) {\r\n                const taskToToggle = await this.fetchTask(id)\r\n                const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\r\n                const res = await fetch(`api/tasks/${id}`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(updTask)\r\n                })\r\n\r\n                const data = await res.json()\r\n\r\n                this.tasks = this.tasks.map((task) =>\r\n                    task.id === id ? { ...task, reminder: data.reminder } : task\r\n                )\r\n            },\r\n            async fetchTasks() {\r\n                const res = await fetch('api/tasks')\r\n                const data = await res.json()\r\n                return data\r\n            },\r\n            async fetchTask(id) {\r\n                const res = await fetch(`api/tasks/${id}`)\r\n                const data = await res.json()\r\n                return data\r\n            }\r\n        },\r\n        async created() {\r\n            this.tasks = await this.fetchTasks()\r\n        }\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]}]}